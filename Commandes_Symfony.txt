SYMFONY
symfony check:requirements 				-->    Verifie environnement Symfony
symfony new nomProjet --webapp 				-->    Créer un projet (se placer dans dossier d'apparition du projet avec terminal avant commande)
symfony console about 					-->    Affiche les informations du projets
symfony serve -d					-->    Lance un serveur web pour le projet
symfony server:stop 					-->    Arret du serveur
symfony console debug:route				-->    Liste les routes

symfony console doctrine:database:create 		-->    Crée la base de données prévue dans le fichier .env
symfony console make:controller	"nomControlleur"	-->    Crée un controlleur
(requirements: ['id'=>'\d+'])				-->    Determine si la route fini par un numérique
symfony console make:entity "nomEntité"			-->    Crée/Modifie une entité
symfony console make:migration 				-->    Crée la migration
symfony console doctrine:migration:migrate (d:m:m)	-->    Execute la migration (ajoute les entités dans phpMyAdmin)

symfony console make:form				--> Crée un formulaire

FIXTURES
composer require orm-fixtures --dev		 	-->    Télécharge la dépendance des fixtures
composer require fakerphp/faker --dev 			-->    Télécharge la dépendance des fakers
symfony console make:fixtures		 		-->    Crée la fixture (nom = nom de la class + Fixtures)
implements DependentFixtureInterface -> function getDependencies return[nom!Fixtures!::class] --> gère ordre fictures
$this->setReference/getReference 			-->    Genère des valeurs entre des fixtures
symfony console doctrine:fixtures:load (d:f:l)		-->    Chargement des fixtures


TWIG
parent() 						-->    Récupère les css de la base et les additionne à ceux désirés
path()							-->    Faire référence à la route via son nom

COMPOSER
composer init 						-->    Initialise le dossier composer
composer dumpautoload					-->    Genere les fichiers d'autoload
composer install					-->    Installe les dépendances du fichier composer.json pour éviter de cloner dans git
composer require orm-fixtures --dev 			-->    Installe la dépendance servant aux fixtures

GITHUB
git init 						-->    Initie git dans le dossier
git remote add nomRemote "lien" 			-->    Crée le lien entre le depot en ligne et le repertoire local
git branch -M main 					-->    Renome branche master en main
git branch "nomBranche" 				-->    Crée une branche
git checkout "nomBranche" 				-->    Change de branche
git merge "nomBranche" 					-->    Merge les branches (depuis main)
git branch -d "nomBranche" 				-->    Supprime la branche
git push -u origin main 				-->    Fais le lien entre la branche main et le dépot distant origin
git status 						-->    Affiche le statut du lien avec git
git log 						-->    Historique des commits
git add . 						-->    Ajoute tous les fichiers au commit
git commit -m "nomCommit"				-->    Crée le commit
git push 						-->    Envoie le commit sur le git

API
symfony console make:user				--> Crée une table de sécurité User
symfony console lexik:jwt:generate-keypair		--> Genere les clés privées et publiques
/!\ Utilisation de UserPasswordHasherInterface pour le hash de mdp
/!\ Utilisation de lexik/jwt-authentication-bundle pour authentification
/!\ Ordre Firewall hyper important



SCHEMASPY
java -jar schemaspy.jar -t mariadb -dp driver-mariaDB.jar -db db_bibliotheque -host localhost -port 3306 -s db_bibliotheque -u root -o ../siteSchemaSpy -vizjs

ORDRE DE CRÉATION

- CRÉER TABLE
- CRÉER ASSOCIATIONS
- MIGRATION
- CREATION JEU DE DONNEES
- CHARGEMENT MIGRATION

SPÉCIFICITÉ

require autoload pour utiliser les classes
Si entité -> controlleur route avec un s à la fin et nom au singulier avec suffixe description
Création objet repository depuis parametre de fonction du controlleur -> Injection de dépendances
findBy du Repository ne sert qu'avec des égalités